//ex -1
#include <pthread.h>
#include <stdio.h>
#include <math.h>
#define NUM 2
#define SIZE 10000


double total;
pthread_mutex_t mutex;
void* sum(void *attr) {
	int i;
	for(i = 0; i < SIZE / NUM; i++) {
		pthread_mutex_lock(&mutex);
		total += sin(i) * sin(i) + cos(i) * cos(i);
		//total += 2;
		pthread_mutex_unlock(&mutex);
	}
	return NULL;
}

int main() {

	//pthread_mutex_t mutex;
	pthread_t threads[NUM];
	pthread_mutex_init(&mutex, NULL);

	int i;
	for (i= 0; i < NUM; i++) {
		pthread_create(&threads[i], NULL, sum, NULL);
	}
	for (i= 0; i < NUM; i++) {
		pthread_join(threads[i], NULL);
	}

	printf("Sum = %f \n", total);
	pthread_mutex_destroy(&mutex);
	return 0;
}

//gcc -pthread ex.c -lm
/////////////////////////////////
/minors 1
#include <pthread.h>
#include <stdio.h>
#include <math.h>
#define NUM 1
#define SIZE 10


int gold;
pthread_mutex_t mutex;
void* sum(void *attr) {
	int i;
	for(i = 0; i < SIZE; i++) {
		pthread_mutex_lock(&mutex);
		printf("Miner 1 gathered 10 gold \n");
		gold += 10;	
		pthread_mutex_unlock(&mutex);
		printf("Trader 1 sold 10 gold \n");
		gold -= 10;	
	}
	
	return NULL;
}

int main() {

	
	pthread_t threads[NUM];
	pthread_mutex_init(&mutex, NULL);

	int i;
	for (i= 0; i < NUM; i++) {
		pthread_create(&threads[i], NULL, sum, NULL);
	}
	for (i= 0; i < NUM; i++) {
		pthread_join(threads[i], NULL);
	}

	printf("Gold: %d \n",gold);
	pthread_mutex_destroy(&mutex);
	return 0;
}

//gcc -pthread ex.c -lm
///////////////////////////
/minors -2
#include <pthread.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 10


int gold;
pthread_mutex_t mutex;
void* sum(void *attr) {
	int i;
	for(i = 0; i < SIZE; i++) {
		pthread_mutex_lock(&mutex);
		printf("Miner 1 gathered 10 gold \n");
		gold += 10;	
		pthread_mutex_unlock(&mutex);
		printf("Trader 1 sold 10 gold \n");
		gold -= 10;	
	}
	
	return NULL;
}

int main ( int argc, char **argv ) {

	int minors = atoi(argv[0]);
	int traders = atoi (argv[1]);
	pthread_t threads[NUM];
	pthread_mutex_init(&mutex, NULL);

	int i;
	for (i= 0; i < minors; i++) {
		pthread_create(&threads[i], NULL, sum, NULL);
	}
	for (i= 0; i < NUM; i++) {
		pthread_join(threads[i], NULL);
	}

	printf("Gold: %d \n",gold);
	pthread_mutex_destroy(&mutex);
	return 0;
}

//gcc -pthread ex.c -lm
